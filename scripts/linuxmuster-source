#!/usr/bin/perl -w
# install packages
# install ubuntu packages from a list
# Licence: General Public Licence (GPL Version 3) 
# Maintainer: jeffbeck-at-web-de

use strict;
use Getopt::Long;
use English;

# Todo:
# see ????? .ssh/config with ssh_keyname
#
# add man page
#
# configure git (colors name, email, ...) 
#
# include and install hubflow?
#
# add option --check 
#    to verify if debian/README.linuxmuster is there
#    check more things
# add option --buildpackage name
#    to build a package
# add option --build-all-packages
# add option --cron to pull daily
# add option to go to github on the project's page 
# (fork it on github and pull the fork???)
# 
my $home = $ENV{'HOME'};
my $conf_dir=$home."/.linuxmuster-source";
my $conf_file=$conf_dir."/linuxmuster-source.conf";
my $conf_example_file="/usr/share/linuxmuster-source/examples/example.linuxmuster-source.conf";

my $ssh_config_template="/usr/share/linuxmuster-source/examples/ssh-config";
my $ssh_config=$home."/.ssh/config";

system("mkdir -p $conf_dir");

# default config
my $hubflow_version="1.4.2";
my $ssh_keyname="";
my $source_dir="linuxmuster-source";
my $source_dir_abs = $home."/".$source_dir;
my $repo_lists="/usr/share/linuxmuster-source/repos/github";


if (not -e $conf_file){
    system("cp $conf_example_file $conf_file");
    print "\nExample Configutation file $conf_file created\n";
    print "\nPlease edit it!\n";
    exit;
}


{ package Conf ; do "$conf_file" 
  || die "Fehler: $conf_file could not be processed (syntax error?)\n";
  print "$conf_file processed succesfully\n"; 
}
# modify configuration
$ssh_keyname=$Conf::ssh_keyname;
print "Key: $Conf::ssh_keyname configured\n";


if (not -e $ssh_config){
    print "Using ssh keyname $ssh_keyname to create .ssh/config \n";
    system("sed -e 's/\@\@ssh-keyname\@\@/${ssh_keyname}/g' $ssh_config_template > $ssh_config"); 
    exit;
} else {
    my $result=system("grep '^ *Host *github' ~/.ssh/config");
    if ($result!=0){
	print "You need to add the following entry for github in .ssh/config\n\n\n";
        system("sed -e 's/\@\@ssh-keyname\@\@/${ssh_keyname}/g' $ssh_config_template");
        print "\nPlease add it manually\n\n"; 
    exit;
    }
}

# options
my $help=0;
my $info=0;
my $setup_hubflow=0;
my $owners=0;
my $pull=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "owners|organisations|o" => \$owners,
           "pull" => \$pull,
           "setup-hubflow" => \$setup_hubflow,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);


if ($help==1){
       print('
Options

  -h  / --help

  -i  / --info
    show, where to checkout scripts,
    and what modules will be checked out

  -o  / --owners / --organisations
    show Organisations/Owners from whom repos will be fetched

  --pull
    clone/pull all packages

  --setup-hubflow
    installs hubflow (root password needed)

');
   print "\n";
       exit;
}



############################################################
# start
############################################################

# --owners / --organisations
if ($owners==1){
    print "\nRepos will be checked out to: $source_dir_abs\n";
    print "----------------------------------------------------------\n";
    my @owners = &fetch_owners();
    print "Owners/Organisations:\n";
    foreach my $owner (@owners){
        print "  * $owner\n";
    }
    my $count=$#owners+1;
    print "----------------------------------------------------------\n";
    print "Repos from $count owners/organisations will be cloned/updated\n\n";
    exit;
}




# --info
if ($info==1){
    print "\nRepos will be checked out to: $source_dir_abs\n";
    print "----------------------------------------------------------\n";
    my $repos=0;
    my @owners = &fetch_owners();
    foreach my $owner (@owners){
        print "Owner/Organisation: $owner\n";
        my @repos = &fetch_repos($owner);
        foreach my $repo (@repos){
            print "  * $repo\n";
            $repos++;
        }
    }
    print "----------------------------------------------------------\n";
    print "$repos Repos will be cloned/updated\n\n";
    exit;
}

# --pull
if ($setup_hubflow==1){
    my $hubflow_dir=$source_dir_abs."/gitflow";
    if (-d $hubflow_dir){
        # checkout the configured hubflow version
        system("cd $hubflow_dir; git checkout $hubflow_version");
        system("cd $hubflow_dir; sudo ./install.sh");
        # checkout the develop tree to make pulls possible again
        system("cd $hubflow_dir; git checkout develop");
    } else {
        print "\nYou have to use --pull before you can setup hubflow\n\n";
   }
    
    exit;
}




# --pull
if ($pull==1){
    my $repo_counter=0;
    my @owners = &fetch_owners();
    # make sure that the ssh key is loaded
    &check_ssh_key($ssh_keyname);
    system("mkdir -p $source_dir_abs");
    foreach my $owner (@owners){
        my @repos = &fetch_repos($owner);

        # make sure the following line exists in .ssh/config
        # ????? call it linuxmuster-source ?????

        #Host github
        #   HostName github.com
        #   User git
        #   IdentityFile ~/.ssh/jeffbeck

        print "\n";
        foreach my $repo (@repos){
            my ($range,$repo_name)=split(/::/,$repo);
            # do it
            $repo_counter++;
	    print "${repo_counter}) PULLING/CLONING $repo\n";
	    print "   owner/organisation: $owner\n";
            my $clone_command="cd $source_dir_abs; ".
                              "git clone github:${owner}/${repo_name}.git";
            my $pull_command="cd ${source_dir_abs}/${repo_name}; ".
                             "git pull";
            #print "$clone_command\n";
            #print "$pull_command\n";
            if (-d "${source_dir_abs}/${repo_name}"){
                print "   Pulling $repo_name ...\n";
                system($pull_command);
            } else {
                print "   Cloning $repo_name ...\n";
                system($clone_command);
            }
            print "----- DONE -------------------------------------------------\n\n";
        }
    }
    #print "------------------------------------------------------------\n";
    print "Cloned/Pulled $repo_counter repositories\n";
}

############################################################
# subs
############################################################

sub fetch_owners {
    # fetch all owners/organsations
    my @owners=();
    opendir GITHUB, $repo_lists or die "Fehler: $! ($repo_lists)";
    foreach my $owner (readdir GITHUB){
        if ($owner eq "."){next};
        if ($owner eq ".."){next};
        push @owners, $owner;
        #print "User/Organisation: ".$dir."\n";
    }
    @owners = sort @owners;
    return @owners;
}


sub fetch_repos {
    # fetch all repos of an owner:   filename(ohne.list)::repo
    my ($owner) = @_;
    my @repos=();
    my $owner_dir=$repo_lists."/".$owner;
    opendir OWNER, $owner_dir or die "Fehler: $! ($owner_dir)";
    foreach my $file (readdir OWNER){
        if ($file eq "."){next};
        if ($file eq ".."){next};
        my $file_abs=$owner_dir."/".$file;
        # open file and read the content
        open (LIST, $file_abs) || die "Fehler: $! ($file_abs)";
        my $range=$file;
        $range=~s/.list//g;
        while(<LIST>){
            chomp();
            my $range_repo=$range."::".$_;
            push @repos, $range_repo;
        }
    }
    return @repos;
}



sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nYou have made a mistake, when specifying options.\n"; 
      print "See error message above. \n\n";
      print "... $scriptname is terminating.\n\n";
      exit;
   } else {
         #print "   * All options  were recognized.\n";
   }
}



sub check_ssh_key {
    my ($ssh_keyname) = @_;
    my $key_abs=$home."/.ssh/$ssh_keyname";
    print "Checking for ssh-key $key_abs:\n";
    if (-e $key_abs){
        my $return = system("ssh-add -l | grep $ssh_keyname > /dev/null");
        if ($return==0){
            print "LOADED\n";
        } else {
            print "NOT LOADED\n";
            system("ssh-add $key_abs")
        }
    } else {
        print "\nERROR: There is no key $key_abs\n\n";
        exit;
    }
}



########################################
# git
########################################
sub pull_git {
    # my ($path,$module,$server) = @_;
       # if ($type eq "gitolite"){
       #     &check_ssh_key($ssh_keyname);
       # }
    # my $module_path=$path."/".$module;
    # my $co_command="cd $path".";"." git clone $server";
    # my $update_command="cd $module_path".";"." git pull";
       # system("mkdir -p $path");
    # if (-e $module_path){
    #     print "UPDATE COMMAND:\n";
    #     print "   $update_command\n";
    #     system($update_command); 
    # } else {
    #     print "CHECKOUT COMMAND:\n";
    #     print "   $co_command\n";
    #     system($co_command); 
    # }
}

sub check_git {
    # my ($path,$module,$server,$type) = @_;
    # if ($type eq "gitolite"){
    #     &check_ssh_key($ssh_keyname);
    # }
    # my $module_path=$path."/".$module;
    # my $check_push_command="cd $module_path".";"." git push --dry-run";
    # my $check_add_command="cd $module_path".";"." git add . --dry-run";
    # my $check_commit_command="cd $module_path".";".
    #                          " git commit --dry-run --short";
    # if (-e $module_path){
    #     print "\n########## $module ##########\n";
    #     #system($check_add_command); 
    #     system($check_commit_command);
    #     print "Push:  ";
    #     system($check_push_command); 
    # }
}



# DEPRECATED

sub fetch_modules {

    # my ($file,$option) = @_;
    # my @modules=();
    # open (MODULES, "<$file");
    # while(<MODULES>){
    #    s/^ //g; # Leerzeichen am Zeilenangfang entfernen
    #    if (m/^\#/ or $_ eq "\n"){
    #        next;
    #    }
    #    chomp(); 

    #    # LIST only
    #    if ($option eq "LIST"){
    #        printf "%-18s-> %-25s \n",$module,$source_dir_abs;
    #        push @modules, $module;
    #        next;
    #    }

    #    # FETCH       
    #    if ($check==0 and $size==0){
    #    print"\n";
    #    print "############################################################\n";
    #    print "#  Line:\n";
    #    print "#  $_\n";
    #    print "#  Module:        $module\n";       
    #    print "#  Path :         $source_dir_abs\n";
    #    print "#  Server:        $server\n";       
    #    print "############################################################\n";
    #    }

    #    if ($check==1){
    #        &check_git($path,$module,$server);
    #    } elsif ($size==1){ 
    #        &show_size($path,$module,$server);
    #    } else {
    #        &pull_git($path,$module,$server);
    #    }
    #    push @modules, $_;
    # }
    # close (MODULES);
    # @modules = sort @modules;
    # return @modules;
}

